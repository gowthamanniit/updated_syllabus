Introduction
Environment Setup (try to use github)
React App folder structure
Components Basic- function & class 
(single modules can't be multiples exports)
one Top level element - grouping
how to use expression? - {}
how to use control statements in react ?
how to change React Default App name?
React Array(basic)
React JSON : basic, nested json, json with array,array with json
React Es-6 -1. Arrow Function (without parameter,with parameter)
            2. var/let/const 
            3. Destructing (array,function,object,nested object)
            4. Array methods Map (loop) 
		test: Array.isArray(arrvar)
            5. spread operator 
            6. Ternary operator 
            7. modules(export and import)
            7.1 export & import images,
	   without export image/only import

React JSX
React Styling and css
i)inline
ii)internal
iii) external
React props (Argument passing)
i) basic (individual attributes)
ii) passing argument as object normal
iii) passing argument as object nested
iv) passing argument as array inside objects [{},{},{},...]
v) passing argument using class constructor
React State (state could only be used in class components)
Combine React state and props
React Forms:
============
-text,number,password,label,radio,checkbox,textarea,
select option,email,date,time,week,file,range,
hidden,button,submit,reset.

React Event Handler / Handling events
-onClick, onChange, onFocus, onBlur, onSubmit
(only press submit button or <button>clickme</button>)
-event.preventDefault() (only <input type=submit>,<button>)
-event.target.value, event.target.id, event.target.name
-event.target.tagName, event.target.type

value attribute in textfield issue 
(because return is always running)

React Hooks --> only function components
	-useState
	-useEffect
	-useForm
	-ErrorHandling

React Life cyle components --> only class components
	i) mount
		- constructor
		- componentDidMount
		- render
	ii) update
		- constructor
		- componentDidUpdate
		- componentDidMount
		- shouldComponentUpdate
		- getSnapShotBeforeUpdate
		- render
	iii) unmount
		-componentWillUnMount
HTTP and React (AXIOS)

Integration with other libraries

==========expression + control statements in react ==========
function App()
{
  var m1=100
  var m2=99
  var m3=35
  var m4=101
  var m5=100
  return(
    <>
      <h1>{(m1>34 && m2>34 && m3>34 && m4>34 && m5>34 && "PASS") || "FAIL"}</h1>  

      <h2>{(m1>34 && m2>34 && m3>34 && m4>34 && m5>34) && "PASS"}</h2>
      <h2>{(m1<=34 || m2<=34 || m3<=34 || m4<=34 || m5<=34) && "FAIL"}</h2>
    </>
  )
}
export default App

<h2>{a>b && "a is greater"}</h2>
<h2>{b>a && "b is greater"}</h2>
<h2>{a>b && a+" is greater"}</h2>
<h2>{b>a && b+" is greater"}</h2>
===========================Arrow Function + argument or parameter passing=====
function Gowtham()
{
  var disp = () =>{
      document.getElementById("res").innerHTML="Button Clicked:"
  }
  var disp1 = (a,b) =>{
      document.getElementById("res").innerHTML="Button Clicked Total:"+(a+b)
  }

  return(
    <>
      
      <button onClick={disp}>click me</button>
      <button onClick={()=>disp1(11,22)}>click me</button>
      <div id="res"></div>    
      </>
  )
}
export default Gowtham
====================var vs let vs const===================================
var -------> global
let,const---->local
var,let--->change
const------>does not change
==================== destructing=========================================
function Gowtham()
{
  let arithmetic=(a,b)=>{
    const myadd=a+b
    const mysub=a-b
    const mymul=a*b
    const mydiv=a/b
    return [myadd,mysub,mymul,mydiv]

  }
  var arr=[11,22,33,44,55]
  var [v1,v2,,v4,v5]=arr
  var [add,sub,mul,div]=arithmetic(11,22)

  var stud={
        rno:1001,
        sname:"abimanyu",
        mark1:99,
        mark2:45,
        mark3:24
  }
  var emp={
    eno:1009,
    ename:"ajith",
    roll:{
        roll1:'superwising',
        roll2:'checking',
        roll3:'maintance',
        roll4:'packing'
    }
  }
//new model object destructiog
  
  function disp({rno,sname,mark1,mark2,mark3})
  {
    var res="My roll number:"+rno+"<br>My Name:"+sname+"<br>Mark1:"+mark1+"<br>Mark2"+mark2+"<br>Mark3:"+mark3
    document.getElementById("ans").innerHTML=res
  }

  // new model nested object destructing 

  function show({eno,ename,roll:{roll1,roll2,roll3,roll4}})
  {
    var res=eno+"<br>"+ename+"<br>"+roll1+"<br>"+roll2+"<br>"+roll3+"<br>"+roll4
    document.getElementById("ans2").innerHTML=res
  }
  
  
  return(
    <>
    <h2>Destructiong old model</h2>
      <h1>Value:1 {arr[0]}</h1>
      <h1>Value:2 {arr[1]}</h1>
      <h1>Value:3 {arr[2]}</h1>
      <h1>Value:4 {arr[3]}</h1>
      <h1>Value:5 {arr[4]}</h1>
      <h2>New way destructing</h2>
      <h1>value1:{v1}</h1>
      <h1>value2:{v2}</h1>
      <h1>value3:{v4}</h1>      
      <h1>value5:{v5}</h1>
      <h2>Destructing with function</h2>
      <h2>Addition:{add}</h2>
      <h2>Subtracttion:{sub}</h2>
      <h2>Multiplication:{mul}</h2>
      <h2>Division:{div}</h2>
      
      <h2>Destructing object old model</h2>
      <h3>Roll Number:{stud.rno}</h3>
      <h3>Student Name:{stud.sname}</h3>
      <h3>Student Mark1:{stud.mark1}</h3>
      <h3>Student Mark2:{stud.mark2}</h3>
      <h3>Student mark3:{stud.mark3}</h3>
      <h2>Destructing object new model</h2>
      <button onClick={()=>disp(stud)}>clickme</button>
      <button onClick={()=>show(emp)}>clickme</button>
      <div id="ans"></div>
      <div id="ans2"></div>
          </>
  )
}
export default Gowtham
=================================Map method + how to use inline css basic================================

function App()
{
  var arr=[11,22,33,44,55,66,77,88,99]
  var s=0
  return(
    <>
      <h1>React Loop</h1>
      <ol type="A">
      {arr.map((v,i)=><li key={i}>{v} {i}</li>)}
      </ol>
      <h1>or method</h1>
      <ol type="A">
      {arr.map((v)=><li key={s=s+1}>{v} {s}</li>)}
      </ol>
    </>
  )
}
export default App

function Gowtham()
{
  var arr=[11,22,233,44,66,99,112]
  var max=arr[0]
  var sum=0
  return(
    <>
        <center>
          <h2>React Loop - Map method</h2>
          </center>
          <ol>{arr.map((item)=><li>{item}</li>)}</ol>
          
           <div style={{display:"none"}}>
            {/* {arr.map((item)=><> {item>max && <>{max=item}</>} </>)} */}
            {arr.map((item)=> item>max && <>{max=item}</>)}
            </div>
          
            <div style={{display:"none"}}>
            {arr.map((item)=>sum=sum+item)}
            </div>
          
            <h1>Max value:{max}</h1>
             <h1>Sum Value:{sum}</h1>

            <h2>Display Even Numbers:</h2>

            {arr.map((item)=>item%2===0 && item+" ")}
        
    </>
  )
}
export default Gowtham
================================== spread operator ... ============
===================================ternary operator=================
==================================module export import==============
modules:
=======
def: break up your code into separate files
use: easy to understand

moudles types:
	1) named (use: variables export and import)
		
		--> in-line individually (multple exports)
			ex:
			mod1.js	
			export const variablename1=value1		
			export const variablename2=value1		
			App.js
			import { variablename1 } from './mod1'
			import { variablename2 } from './mod1'
		--> all at once at bottom
			meaning : only one export
			mod2.js
			const var1=value1
			const var2=value2
			const var3=value3
			export {var1,var2,var3}		
			App.js
			import {var1,var2,var3} from './mod2'
	2) default (ex: component export and import - only one export)		
		create one folder inside src
		create one component either class or function
		export componet
			ex:
			function Vimal()
			{
			return(
			.......
			)
			}
			export default Vimal
		app.js
			import Vimal from './component/filename'

			<vimal/>
============images export import==========================================
ex: D:\notes\abireact\myapp\src\components
commonvar.js

export var accno=1143155000137984
export var ifsc="KVL0001143"
export var aadhar=858415764043
export var myimg2=require("../images/hd2.jpg")  //double dot must


App.js
=======
import { aadhar, accno, ifsc } from "./components/CommonVar"
import myimg1 from "./images/hd4.jpg"--------------------> only import images
import { myimg2 } from "./components/CommonVar" -------------> export and import images

function Gowtham()
{
  return(
      <>
        <h1>MyAadhar:{aadhar}</h1>      
        <h1>Myaccount:{accno}</h1> 
        <h1>IFSC code:{ifsc}</h1>           
        <img src={myimg1} alt="path not found"></img>
        <img src={myimg2} alt="path not found"></img>

      </>
  )
}
export default Gowtham
==================react render 2 ways==================
React Render HTML
==================

React's goal is in many ways to render HTML in a web page.
React renders HTML to the web page by using a function called ReactDOM.render().

The ReactDOM.render() function takes two arguments, HTML code and an HTML element.

But render where?

There is another folder in the root directory of your React project, named "public". In this folder, there is an index.html file.

You'll notice a single <div> in the body of this file. This is where our React application will be rendered.

way 1:
======
header file:
	import ReactDOM from 'react-dom/client'

ex:
const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <App/>
  </React.StrictMode>
);

way:2
======
header file:
	import ReactDOM from 'react-dom'
	ReactDOM.render(<App/>,document.getElementById("root"))
==============react jsx & all notes revision=======================
React JSX:

Javascript and XML:

purpose: allow to write html code


1)how to use single tag:
	ex:
	var data=<h1>..........</h1>

2)large block of html tag
   - must know about "one top level element"
			<>
			..........
			</>
	ex:
	var data=(
			<>  or div or span
			..............
			</>
		)
	impot {ReactDom} from 'react-dom'
	ReactDOM.render(data,document.getElementById("root"))

3) expression: {calculation or path or call function}


	call function : don't use () when no arguments

	ex:
	<img src={path}/>
	<button onClick={show}/>
	<button onClick={()=>show(value1,value2)}
	{a+b/c}
4) attribute name className instead of class
	use: CSS style
	<h1 className="yourclassname">...........</h1>

	index.css
		.yourclassname
		{
		property:value;
		.........
		}
5) element Must be closed
	<></>
	<br></br>
	<br/>
6) don't use double quotes
7) if you want to assign: <>{sum=100}</>
8) control statements
	{(condition1 && condition2 && ..."final") || "esle state"}

	{arr.map((item)=>item)}
	<ol>{arr.map((item)=><li>{item}</li>)}</ol>

9) ternary operator
	exp1? exp2  : exp3

	{isvaliduser===true ? <Valid/> : <Invalid/>}

=================================React styling and css===================
Styling and CSS:
==================
2 types:
	1 ) inline
		ex:
    <h1 style={{property:"value",property:"value"}}>	............... </h1>

	note:
	- don't use semicolon(;) when apply multi property
	- only use comma(,)
	- value must be double quotes key:"value"
	- property is case senstive 
	 ex:
		backgroundColor-->C caps		
		fontSize-->S caps
		
	2 ) external

	create one folder --> right click on src folder
			  --> new folder
			  --> right click on folder
			  --> new file
				  --> filename.css

	App.js or any js file
	======================
	note:
		don't use from
		don't export only import
		extension must filename.css	
	ex:
		import "./foldername/filename.css"
		import "../foldername/filename.css"

	. -> current file's folder
	.. -> current file's pervious folder
=================React state (only works on class comp)=======================
React State:
=============

it is used to store json.

note:
	we can use only class components

syntax:
	import React from "react"
	class classname extends React.Component
	{
		constructor(props)
		{
			super()		
			this.state={
				key1:value,
				key2:[val1,val2,val3,..],
				key3:{key1:val1,key2:val2,..},
				key4:value
				}
		}
		render()
		{
			return(
			<>
				{this.state.key1}

			</>
			)
		}
	}
	export default classname

react state + props:
====================

props: argument passing from index.js file

state: to store props value using json


index.js:
	<App rno="1001" sname="gowthaman"/>

App.js:
	constructor(props)
	{
		super(props)
		this.state={
				myrno=this.props.rno
				sname=this.props.sname
		}

	}
	render()
	{
	return(
		<>
		<h1>{this.state.myrno}</h1>
		</>
	)
	}
ex:
import React from "react";
class Gowtham extends React.Component
{
  constructor(props)
  {
    super(props)
    this.state={rno:this.props.rno,
              sname:this.props.sname,
              mark:this.props.mark
            }
  }
  render()
  {
    return(
        <>
        <h1>React State</h1>
        <h2>Roll number:{this.state.rno}</h2>
        <h2>Sname:{this.state.sname}</h2>
        <h2>Mark 1:{this.state.mark}</h2>
        
        </>
    )
  }
}
export default Gowtham
-----------react state + props using class components------------
import React from 'react'
class Gowtham extends React.Component
{
  constructor(props)
  {
    super(props)
    this.state=this.props.mydata
  }
  render()
  {
    var arr=[]
    var i=0,tot=0
    for(var k in this.state.marks)
    {
      //console.log(k)
      arr[i++]=<tr><td>{k}</td><td>{this.state.marks[k]}</td></tr>
      tot=tot+this.state.marks[k]
    }
    return(
      <>
        <h2>Roll number:{this.state.rno}</h2>
  ``      <h2>Name:{this.state.sname}</h2>
        {/*         
        <h2>Tamil:{this.state.tamil}</h2>
        <h2>Englsih:{this.state.english}</h2>
        <h2>Maths:{this.state.maths}</h2>
        <h2>Science:{this.state.science}</h2>
        <h2>Social:{this.state.social}</h2> */ /*}
        <table border="3">
          <tr><th>Subjects</th><th>Marks</th></tr>
        {arr.map((item)=>item)}
        <tr><th>Total:</th><th>{tot}</th></tr>
        </table>    
      </>
    )
  }
}
export default Gowtham

index.js
--------
var stud=
{rno:1001,
  sname:"narmatha",
  marks:{
  tamil:33,
  english:77,
  maths:34,
  science:77,
  social:10
  }
}
ReactDOM.render(<Gowtham mydata={stud}></Gowtham>,document.getElementById("root"))
--------------App.js -- props using function components
function Gowtham(props)
{
  return(
    <>
    <center>
      
    <h1>Student Roll Number:{props.mydata.rno}</h1>
    <h1>Student Name       :{props.mydata.sname}</h1>
    <h1>Student Mark       :{props.mydata.mark}</h1>    

    </center>
    </>
  )
}
export default Gowtham

index.js
========

var stud={
  rno:1002,
  sname:"narmatha",
  mark:19
}
ReactDOM.render(<Gowtham mydata={stud}></Gowtham>,document.getElementById("root"))
================ props - arg passing using class components=============

import React from 'react'
class Gowtham extends React.Component
{
  constructor(props)
  {
    super()
  }
  render()
  {
    return(
        <>
            <h1>This is class Components</h1>
    <h1>Student Roll Number:{this.props.mydata.rno}</h1>
    <h1>Student Name       :{this.props.mydata.sname}</h1>
    <h1>Tamil Mark       :{this.props.mydata.marks.tamil}</h1>    
    <h1>English Mark       :{this.props.mydata.marks.english}</h1>    
    <h1>Maths Mark       :{this.props.mydata.marks["maths"]}</h1>    
    <h1>Science Mark       :{this.props.mydata.marks.science}</h1>    
    <h1>Social Mark       :{this.props.mydata.marks.social}</h1>    

        </>
    )
  }
}
export default Gowtham
=======================props + json + for in + map ================
function Gowtham(props)
{

  var fres=[]
  var i=0
  for(var k in props.mydata)
  {
    //console.log(k,"=============>",props.mydata[k])
    fres[i++]=<>{k}:{props.mydata[k]}</>
  }
  return(
    <>
    <center>
    <h2>================old method============</h2>
    <h1>Tamil Mark       :{props.mydata.tamil}</h1>    
    <h1>English Mark       :{props.mydata.english}</h1>    
    <h1>Maths Mark       :{props.mydata["maths"]}</h1>    
    <h1>Science Mark       :{props.mydata.science}</h1>    
    <h1>Social Mark       :{props.mydata.social}</h1>     
    </center>
    <h2>================new method============</h2>
    <ol>{fres.map((item)=><li>{item}</li>)}</ol>    
    </>
  )
}
export default Gowtham
====================== props + json + for in + class + table result + sum==========
import React from 'react'
class Gowtham extends React.Component
{
  constructor(props)
  {
    super()
  }
  render()
  {
    var fres=[]
    var i=0,tot=0
    for(var k in this.props.mydata)
    {
      //console.log(k,"=============>",props.mydata[k])
      tot=tot+this.props.mydata[k]
      fres[i++]=<tr><td>{k}</td><td align='right'>{this.props.mydata[k]}</td></tr>
    }
    return(
        <>
    <h2>=======class components old model=====================</h2>
    <h1>Tamil Mark       :{this.props.mydata.tamil}</h1>    
    <h1>English Mark       :{this.props.mydata.english}</h1>    
    <h1>Maths Mark       :{this.props.mydata["maths"]}</h1>    
    <h1>Science Mark       :{this.props.mydata.science}</h1>    
    <h1>Social Mark       :{this.props.mydata.social}</h1>    
    <h2>=======class components new model=====================</h2>
    <table border="2">
    <tr><th>Subjects</th><th>Marks</th></tr>  
    {fres.map((item)=><>{item}</>)}    
    <tr><th>Total Marks:</th><th align='right'>{tot}</th></tr>
    </table>
        </>        
    )
  }
}
export default Gowtham

//===========================react forms================
function Gowtham()
{
  return(
    <center>
      <form>
      <table border="0" >
      <tr><td><label>Enter Candidate Name:</label></td>
      <td><input type="text"></input></td></tr>

      <tr><td><label>Enter Age:</label></td>
      <td><input type="number"></input></td></tr>

      <tr><td><label>Enter password:</label></td>
      <td><input type="password"></input></td></tr>
      
      <tr><td><label>Enter Addres:</label></td>
      <td><textarea rows="5" cols="25"></textarea></td></tr>
      
      <tr><td><label>Select Gender:</label></td>
      <td><input type="radio" name="g"></input>Male
      <input type="radio" name="g"></input>FeMale
      <input type="radio" name="g"></input>Others </td></tr>
      
      <tr><td><label>Select courses:</label></td>
      <td><input type="checkbox"></input>Male
      <input type="checkbox" ></input>FeMale
      <input type="checkbox" ></input>Others </td></tr>
      
      <tr><td><label>Select Month:</label></td>
      <td><select>
      <option>January</option>
      <option>February</option>
      <option>March</option>
      <option>April</option>
      <option>May</option>
      <option>June</option>
      </select></td></tr>

      <tr><td><label>Enter Email:</label></td>
      <td><input type="email"></input></td></tr>

      <tr><td><label>Choose DOB:</label></td>
      <td><input type="date"></input></td></tr>

      <tr><td><label>Time:</label></td>
      <td><input type="Time"></input></td></tr>

      <tr><td><label>Week:</label></td>
      <td><input type="week"></input></td></tr>

      <tr><td><label>Favorite color:</label></td>
      <td><input type="color"></input></td></tr>

      <tr><td><label>upload your photo:</label></td>
      <td><input type="file"></input></td></tr>

      <tr><td><label>VOLUME +/-:</label></td>
      <td><input type="range"></input></td></tr>
      <tr><td></td>
      
      <td>
      <input type="submit" value="submit clickme"></input>
      <br></br>
      <button> button clickme</button>
      <input type="reset" value="reset"></input>
      <input type="button" value="normal button"></input>
      </td>
      </tr>
  
      </table>
      </form>
    </center>
  )
}
export default Gowtham
//================React event handling / handling events =========
function Gowtham()
{
  var tot=0
  const show=(event)=>{
    
    if(event.target.type==="number")
    {
      
      tot=parseInt(tot)+parseInt(event.target.value)      
      document.getElementById("r1").innerHTML="Sum of digits:"+tot  
      
    }
    
*/
    /*
    console.log(event.target.tagName)
    if(event.target.tagName==="INPUT")
    document.getElementById("r1").innerHTML="You are Typing in Textbox...."
  else if(event.target.tagName==="TEXTAREA")
  document.getElementById("r1").innerHTML="You are Typing in address box...."
  else if(event.target.tagName==="SELECT")
  document.getElementById("r1").innerHTML="You are changing months........."
  else if(event.target.tagName==="BUTTON")
  document.getElementById("r1").innerHTML="You are clicking button........."
*/
/*
    }
  return(
    <>
    <h1>Event target tagname</h1>
    <input type="text" onChange={(e)=>show(e)} ></input><br></br>
    <input type="number" onBlur={(e)=>show(e)}></input>    
    <input type="text" onChange={(e)=>show(e)}></input>    
    <input type="number" onBlur={(e)=>show(e)}></input>    
    <input type="text" onChange={(e)=>show(e)}></input>    
  
    <div id="r1"></div>
    
    </>
  )
}
export default Gowtham
*/

/*
function Gowtham()
{
  const show=(event)=>{
  if(event.target.name==="rno")
    document.getElementById("r1").innerHTML=event.target.value
  if(event.target.name==="name")
    document.getElementById("r2").innerHTML=event.target.value
  if(event.target.name==="mark")
    document.getElementById("r3").innerHTML=event.target.value

  }
  return(
    <>
    <h1>Event target name</h1>
    <input type="text" onChange={(e)=>show(e)} name="rno" placeholder="enter rno"></input><br></br>
    <input type="text" onChange={(e)=>show(e)} name="name" placeholder="enter name"></input><br></br>
    <input type="text" onChange={(e)=>show(e)} name="mark" placeholder="enter mark"></input><br></br>
    
    <div id="r1"></div>
    <div id="r2"></div>
    <div id="r3"></div>
    
    </>
  )
}
export default Gowtham


/*
function Gowtham()
{
  const show=(event)=>{
    console.log(event.target.tagName)
    if(event.target.tagName==="INPUT")
    document.getElementById("r1").innerHTML="You are Typing in Textbox...."
  else if(event.target.tagName==="TEXTAREA")
  document.getElementById("r1").innerHTML="You are Typing in address box...."
  else if(event.target.tagName==="SELECT")
  document.getElementById("r1").innerHTML="You are changing months........."
  else if(event.target.tagName==="BUTTON")
  document.getElementById("r1").innerHTML="You are clicking button........."

    }
  return(
    <>
    <h1>Event target tagname</h1>
    <input type="text" onChange={(e)=>show(e)}  placeholder="enter username:"></input><br></br>
     Enter Address:<textarea onChange={(e)=>show(e)}  rows="6" cols="25"></textarea>
    <select onChange={(e=>show(e))}>
    <option>January</option>
    <option>February</option>
    <option>March</option>
    <option>April</option>
    </select>
    <button onClick={(e)=>show(e)}>clickme</button>
    <div id="r1"></div>
    
    </>
  )
}
export default Gowtham
*/
/*
function Gowtham()
{
  const show=(event)=>{
  if(event.target.name==="rno")
    document.getElementById("r1").innerHTML=event.target.value
  if(event.target.name==="name")
    document.getElementById("r2").innerHTML=event.target.value
  if(event.target.name==="mark")
    document.getElementById("r3").innerHTML=event.target.value

  }
  return(
    <>
    <h1>Event target name</h1>
    <input type="text" onChange={(e)=>show(e)} name="rno" placeholder="enter rno"></input><br></br>
    <input type="text" onChange={(e)=>show(e)} name="name" placeholder="enter name"></input><br></br>
    <input type="text" onChange={(e)=>show(e)} name="mark" placeholder="enter mark"></input><br></br>
    
    <div id="r1"></div>
    <div id="r2"></div>
    <div id="r3"></div>
    
    </>
  )
}
export default Gowtham
*/
// function Gowtham()
// {
//   var ans=0
//   const findTot=(event)=>{
//     document.getElementById("s"+(event.target.id).charAt(1)).innerHTML=event.target.value
    /*
    if(event.target.id==="t1")
    document.getElementById("s1").innerHTML=event.target.value
    if(event.target.id==="t2")
    document.getElementById("s2").innerHTML=event.target.value
    if(event.target.id==="t3")
    document.getElementById("s3").innerHTML=event.target.value
    if(event.target.id==="t4")
    document.getElementById("s4").innerHTML=event.target.value
    if(event.target.id==="t5")
    document.getElementById("s5").innerHTML=event.target.value
  */
    /*var n1=parseInt(document.getElementById("t1").value)
    var n2=parseInt(document.getElementById("t2").value)
    var n3=parseInt(document.getElementById("t3").value)
    var n4=parseInt(document.getElementById("t4").value)
    var n5=parseInt(document.getElementById("t5").value)*/
//     document.getElementById("tot").innerHTML=ans
//   }
//   return(
//     <div> 
//             <h1>Event target -- value</h1>  
//             <input type="text" id="t1" onChange={(e)=>findTot(e)}></input><span id="s1"></span>
//             <input type="text" id="t2" onChange={(e)=>findTot(e)}></input><span id="s2"></span>
//             <input type="text" id="t3" onChange={(e)=>findTot(e)}></input><span id="s3"></span>
//             <input type="text" id="t4" onChange={(e)=>findTot(e)}></input><span id="s4"></span>
//             <input type="text" id="t5" onChange={(e)=>findTot(e)}></input><span id="s5"></span>
            
//             <div id="tot"></div>

//     </div>
//   )
// }
// export default Gowtham
/*

function Gowtham()
{
  const dis=(event)=>{
    event.preventDefault()
    alert("submit button clicked")
    }
  return(
    <center>
      <h1>welcome to onsubmit event</h1>
       <form onSubmit={(e)=>dis(e)}>
    <input type="text" name="t1"></input>
    <br></br>
        <input type="button" value="clickme normal button"></input>
        <br></br>
        <input type="submit"></input>
       <br></br>
       <input type="reset" value="clear"></input>
       <br></br>
        <button>click me</button>
       </form>
    </center>
  )
}
export default Gowtham
*/
/*
function Gowtham()
{
  const dis1=(event)=>{    
    //console.log(event.target.id)
    document.getElementById(event.target.id).style.backgroundColor="rgb(111,222,77)";
  }
  const dis2=(event)=>{
        document.getElementById(event.target.id).style.backgroundColor="rgb(255,255,255)"    
  }
  return(
    <>
    <h1>OnFocus Event</h1>
    <input type="text" id="t1" onBlur={(e)=>dis2(e)} onFocus={(e)=>dis1(e)} placeholder="enter text"></input>
    <input type="text" id="t2" onBlur={(e)=>dis2(e)} onFocus={(e)=>dis1(e)} placeholder="enter text"></input>
    <input type="text" id="t3" onBlur={(e)=>dis2(e)} onFocus={(e)=>dis1(e)} placeholder="enter text"></input>
    <input type="text" id="t4" onBlur={(e)=>dis2(e)} onFocus={(e)=>dis1(e)} placeholder="enter text"></input>
    <input type="text" id="t5" onBlur={(e)=>dis2(e)} onFocus={(e)=>dis1(e)} placeholder="enter text"></input>
    <div id="res"></div>
    </>
  )
}
export default Gowtham
*/
/*
function Gowtham()
{
  var amt500=0,amt200=0
  const show1=()=>{
    amt500=document.getElementById("t1").value*500
    result()    
  }
  const show2=()=>{
    amt200=document.getElementById("t2").value*200
    result()    
  }
  function result()
  {
    document.getElementById("res").innerHTML="Total Amt:"+(amt500+amt200)
  }

  return(
    <center>      
      <h1>onChange event</h1>
      <form>
      500 X <input type="text" id="t1" onChange={show1} placeholder="enter no. of notes"></input>
      <br></br>
      200 X <input type="text" id="t2" onChange={show2} placeholder="enter no. of notes"></input>
      <br></br><br></br><br></br><br></br>
      </form>
      <div id="res"></div>
    </center>
  )
}
export default Gowtham
*/
/*
function Gowtham()
{
  const show=()=>{
      alert("button clicked")
  }
  const dis=(event)=>{
    event.preventDefault() // page without refresh
    var v1=document.getElementById("t1").value
    console.log("data:",v1)
    document.getElementById("res").innerHTML="clicked"+v1
    alert(v1)

  }
  return(
  <form>
    <input type="text" id="t1" ></input>
    <button onClick={show}>click me without arg</button>
    <button onClick={(ev)=>dis(ev)}>click me with arg</button>
    <input type="submit"></input>
    <input type="button" value="normal button" onClick={show}></input>
    <div id="res"></div>
  </form>
  )
}
export default Gowtham
//==========================React Hook===================
import { useState } from 'react'
function Gowtham()
{
  const [name,setName]=useState("narmatha")
  const [city,setCity]=useState("karur")
  
 const show=(event)=>{
  if (event.target.id==="t1")
  setName(event.target.value)
  if (event.target.id==="t2")
  setCity(event.target.value)
 }
  return(
    <center>
      <h1>React Textbox value issue-we can't type in textbox</h1>
      <h1>problem overcome using hook </h1>
      Enter User name:
      <input type="text" id="t1" onChange={(e)=>show(e)} value={name}></input><br></br>
      Enter City:
      <input type="text" id="t2" onChange={(e)=>show(e)} value={city}></input><br></br>
      
    </center>
  )
}
export default Gowtham
---------------------------useState Hook using object----------
import { useState } from "react"
function App(props)
{
  const[obj,setObj]=useState(props.myobj)
  const show=()=>{
    setObj({rno:1009,sname:"karthi"})
  }
  return(
    <>
      <h1>{obj.rno}</h1>
      <h1>{obj.sname}</h1>
      <button onClick={show}>change</button>
    </>
  )
}
export default App
------------------useState hook end ----------------------
import { useState,useEffect } from 'react'
function Gowtham()
{
  const[title,setTitle]=useState("umesh")
  var k=0
  useEffect(()=>{
    document.title=title+ ++k
    console.log("use effect",++k)
  })
  const show=(event)=>{  
    setTitle(event.target.value)    
    
  }
  const show1=(event)=>{
    event.preventDefault()
  }
  return(
    <>
    <h1>Default title: {title} : {++k}</h1>
    <input type="text" onChange={(e)=>show(e)}  value={title} placeholder='Enter Title to update'></input><br></br>
    <button onClick={(e)=>show1(e)}>clickme change name</button>
    </>
  )
}
export default Gowtham

import { useForm } from 'react-hook-form'
function Gowtham()
{
  const {register,handleSubmit}=useForm()
  const show=(data)=>{
    console.log(data)
    document.getElementById("res1").innerHTML=data.un
    document.getElementById("res2").innerHTML=data.pw
    document.getElementById("res3").innerHTML=data.mark
    document.getElementById("res4").innerHTML=data.dob    
    document.getElementById("res5").innerHTML=data.gender    
  }
  return(
    <>
      <h1>React Hook Form Demo</h1>
      <form onSubmit={handleSubmit(show)}>
      <input type="text" name="un" placeholder='enter user name' {...register("un")}></input><br></br>
      <input type="password" name="pw" placeholder='Enter password:' {...register("pw")}></input><br></br>
      <input type="number" name="mark" placeholder='Enter mark:' {...register("mark")}></input><br></br>
      <input type="date" name="dob" {...register("dob")}></input><br></br>
      <input type="radio" name="gender" value="male" {...register("gender")}></input>Male<br></br>
      <input type="radio" name="gender" value="female" {...register("gender")}></input>Female<br></br>
      <input type="radio" name="gender" value="others" {...register("gender")}></input>Others<br></br>
      <input type="submit" value="click me"></input>
      </form>
      <div id="res1"></div>
      <div id="res2"></div>
      <div id="res3"></div>
      <div id="res4"></div>
      <div id="res5"></div>
    </>
  )
}
export default Gowtham
//=========================Error Handling Hook =============
import { useForm } from 'react-hook-form'
function Gowtham()
{
  const{register,handleSubmit,formState:{errors}}=useForm()  
  const dis=(data)=>{
    console.log(data)
  }
  return(
    <form onSubmit={handleSubmit(dis)}>
    <h1>Error Handling</h1>
    
    <input type="text" name="sp" placeholder='Enter special char only:' {...register("sp",{required:true,pattern:/^[^A-Za-z0-9]+$/})}></input>
{errors.sp && errors.sp.type==="pattern" && <font color='red'>* only type special char </font>}
<br></br>

    <input type="text" name="un" placeholder='Enter User Nmae:' {...register("un",{required:true,pattern:/^[a-z]+$/})}></input>
      {errors.un && errors.un.type==="required" && <font color='red'>* must fill username</font>}
      {errors.un && errors.un.type==="pattern" && <font color='red'>* only type small a-z </font>}
       <br></br>

       <input type="password" name="pw" placeholder='Enter Password:' {...register("pw",{required:true,minLength:8,maxLength:12})}></input>
       {errors.pw && errors.pw.type==="required" && <font color='red'>* must fill username</font>}
       {errors.pw && errors.pw.type==="minLength" && <font color='red'>* min char : 8 need</font>}
       {errors.pw && errors.pw.type==="maxLength" && <font color='red'>* max char : 12 exceed</font>}
       <br></br>
       <input type="submit" value="click me"></input>
    </form>
  )
}
export default Gowtham

//syntax very important using spread opertor...
 const [state, setState] = useState({ a: 1, b: 2 });
        const updateState = () => {
          setState(prevState => ({ ...prevState, c: 3 }));
        };
ex:

const[inputs,setInputs]=useState({})

    const handleChange = (event) => {
        const name = event.target.name;
        const value = event.target.value;
        setInputs(values => ({...values, [name].: value}))
      }
//================react life cycle compoenents===============
//import React from "react";
//class App extends React.Component
import { Component } from "react"
class App extends Component
{ 
  constructor(props)
  {
    super(props)
    this.state=this.props.myobj
    this.state.curdt=new Date();
    console.log("constructor called")
  }
  componentDidMount()
  {
    setTimeout(()=>{this.setState({rno:1234})},4000)
  }
  componentDidUpdate()
  {
    document.getElementById("r1").innerHTML="component updated"
  }
  shouldComponentUpdate()
  {
    return true;
  }
  getSnapshotBeforeUpdate(prevState,prevProps)
  {
    
    document.getElementById("r2").innerHTML="Old Value:"+prevProps.rno+" "+prevProps.curdt;
    document.getElementById("r3").innerHTML="New Value:"+this.state.rno+" "+new Date();
    return this.state;
  } 
  render()
  {
    const updatefun=()=>{
      var newrno=parseInt(document.getElementById("t1").value);
      this.setState({rno:newrno})
    }
    
    const reloadfun=()=>{
      window.location.reload()
    }
    return(
      <>
        <h1>2.update life cycle components</h1>
        <h2>{this.state.rno}</h2>
        <div id="r1"></div>
        <div id="r2"></div>
        <div id="r3"></div>
        <input type="text" id="t1" placeholder="Enter new rno"></input>
        <button onClick={updatefun}>update rno</button>
        <button onClick={reloadfun} >refresh</button> 
      </>
    )
  }
}
export default App



//=====================axios http header or api handling =======
import axios from "axios"

import { useState } from 'react'

function Gowtham()
{

  const [city,setCity]=useState("")
  const [output,setOutput]=useState(null)

  const updateCity=(event)=>{
    setCity(event.target.value)
  }
  const findReport=()=>{
    document.getElementById("res1").innerHTML=""
    const wapi=`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=3fd756d3c6233eecf8a57b9da9ce4d07`
    console.log(wapi)
    if (city.length>2)
    {
      axios.get(wapi).then((res)=>{
        console.log(res.data)
        setOutput(res.data)
        
      }).catch((err)=>{
        console.log(err.response.data)
        setOutput(err.response.data)
        
      }).finally(()=>{
         document.getElementById("res2").innerHTML="=========Report End========="
      })
    }
    else
    {
      document.getElementById("res1").innerHTML="city name atleast 3 chars"
    }

  }

  return(
    <>
      <h1>API Handling Using React and Axios HTTP Header</h1>
      <input type="text" onChange={(e)=>updateCity(e)} value={city} placeholder="Enter City Name:"></input><br></br>
      <input type="button" onClick={findReport} value="Weathor Report"></input><br></br>
      <div id="res1"></div>
      {output!==null && output.cod===200 && <>
        <h2>Weather Report1:{output.weather[0].main}</h2>
        <h2>Weather Report2:{output.weather[0].description}</h2>
        <h2>Temperature    :{output.main.temp}</h2>
      </>}
      
      {output!==null && output.cod==="404" && <>
        <h2>Result:   {output.message}</h2>
      </>}
      <div id="res2"></div>
      
      </>
  )
}
export default Gowtham
//=====================
//=========================react + node + express+ mongocloud====
// =dinesh sujitha batch =====================
react program:
===============
import axios from 'axios'
import {useState} from 'react'
function App()
{
  const[rno,setRno]=useState(0)
  const[name,setName]=useState("")
  const[mark,setMark]=useState(0)
  const[output,setOuput]=useState(null)

  const dis=(event)=>{
    if(event.target.id==="rid")
      setRno(event.target.value)
    if(event.target.id==="nid")
      setName(event.target.value)
    if(event.target.id==="mid")
      setMark(event.target.value)
    
  }
  const insfun=()=>{
        var myinputs={rno:rno,name:name,mark:mark}
        console.log(myinputs)
        axios.get("http://localhost:8900",{params:myinputs}).then((res)=>{
          console.log(res.data)
          setOuput(res.data)
        }).catch((err)=>{
          console.log(err.response.data)
        })
  }
  return(
    <>
    <form>
      <h1>DataBase - Using MVC - Model View COntroller</h1>
      Enter roll number:<input id="rid" type="text" value={rno} onChange={(e)=>dis(e)}></input><br></br>
      Enter Student Name:<input id="nid" type="text" value={name} onChange={(e)=>dis(e)}></input><br></br>
      Enter Student Mark:<input id="mid" type="text" value={mark} onChange={(e)=>dis(e)}></input><br></br>
      <input type="button" value="Insert/Save" onClick={insfun}></input>
    <h1>{output!==null  && "successfully inserted. id =" + output.insertedId}</h1>
    </form>
    </>
  )
}
export default App

node js + express js:
=====================
server.js
=========
var http=require("http")
var url=require("url")
//var func=require("./serverdatabase")  // local
var func=require("./serverdbcloud")    // cloud
http.createServer(async (req,res)=>{
//
console.log("test from react")

res.setHeader('Access-Control-Allow-Origin', '*'); /* @dev First, read about security */
res.setHeader('Access-Control-Allow-Methods', 'OPTIONS,GET');
res.setHeader('Access-Control-Max-Age', 2592000); // 30 days


var myurl=url.parse(req.url,true)
console.log(myurl) //full url information
var myqry=myurl.query
console.log(myqry) // to filter query only
var finaljson=JSON.parse(JSON.stringify(myqry))
console.log(finaljson) // to json only (remove object null type)

try
{
    res.writeHead(200,{'Content-Type':'application/json'})
    var dataset=await func.insertfun(finaljson) // pass to serverdatabase.js
    var finalresult=JSON.parse(JSON.stringify(dataset))
    res.write(finalresult) // goto react
}
catch{
    console.log("error")
}
finally{
    res.end();  // 
}


}).listen(8900)
console.log("port listening at 8900")

serverdatabase.js(local)
========================
const {MongoClient}=require("mongodb")
const condb=new MongoClient("mongodb://127.0.0.1:27017")
condb.connect()
async function insertfun(myinput)
{
    console.log("myinput:",myinput)
try{
    var data=await condb.db("student").collection("details").insertOne(myinput)    
    return JSON.stringify(data)
}
catch{
    console.log("error")  
    await condb.close()  
}
}
module.exports={insertfun} // anywhwer access 
serverdbcloud.js
==================
const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://gowthaman:JYwMixqlFYZBteBD@gowthamcluster.nbman.mongodb.net/?retryWrites=true&w=majority&appName=gowthamcluster";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function insertfun(myinput) {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
  var data= await client.db("gdatabase").collection("gcollection").insertOne(myinput)
    return JSON.stringify(data)
 
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
module.exports={insertfun}
//run().catch(console.dir);
