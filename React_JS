Introduction
Environment Setup
React App folder structure
Components Basic- function & class (single modules can't be multiples exports)
one Top level element - grouping
how to use expression? - {}
how to use control statements in react ?
how to change React Default App name?
React Array(basic)
React JSON : basic, nested json, json with array,array with json
React Es-6 -1. Arrow Function (without parameter,with parameter)
            2. var/let/const 
            3. Destructing (array,function,object,nested object)
            4. Array methods Map (loop) 
            5. spread operator 
            6. Ternary operator 
            7. modules(export and import)
            7.1 export & import images,without export image/only import
React render - 2 ways
React JSX
React Styling and css
i)inline
ii)external
React props (Argument passing)
i) basic (individual attributes)
ii) passing argument as object normal
iii) passing argument as object nested
iv) passing argument using class constructor
React State (state could only be used in class components)
Combine React state and props
React Forms:
============
-text,number,password,label,radio,checkbox,textarea,
select option,email,date,time,week,file,range,
hidden,button,submit,reset.

React Event Handler / Handling events
-onClick, onChange, onFocus, onBlur, onSubmit(only press submit button)
-event.preventDefault() (only <input type=submit>,<button>)
-event.target.value, event.target.id, event.target.name


React Life cyle components --> only class components
React Hooks --> only function components

HTTP and React (AXIOS)
Integration with other libraries



================expression + control statements in react ==========
function App()
{
  var m1=100
  var m2=99
  var m3=35
  var m4=101
  var m5=100
  return(
    <>
      <h1>{(m1>34 && m2>34 && m3>34 && m4>34 && m5>34 && "PASS") || "FAIL"}</h1>  

      <h2>{(m1>34 && m2>34 && m3>34 && m4>34 && m5>34) && "PASS"}</h2>
      <h2>{(m1<=34 || m2<=34 || m3<=34 || m4<=34 || m5<=34) && "FAIL"}</h2>
    </>
  )
}
export default App

<h2>{a>b && "a is greater"}</h2>
<h2>{b>a && "b is greater"}</h2>
<h2>{a>b && a+" is greater"}</h2>
<h2>{b>a && b+" is greater"}</h2>
===========================Arrow Function + argument or parameter passing=====
function Gowtham()
{
  var disp = () =>{
      document.getElementById("res").innerHTML="Button Clicked:"
  }
  var disp1 = (a,b) =>{
      document.getElementById("res").innerHTML="Button Clicked Total:"+(a+b)
  }

  return(
    <>
      
      <button onClick={disp}>click me</button>
      <button onClick={()=>disp1(11,22)}>click me</button>
      <div id="res"></div>    
      </>
  )
}
export default Gowtham
====================var vs let vs const===================================
var -------> global
let,const---->local
var,let--->change
const------>does not change
==================== destructing=========================================
function Gowtham()
{
  let arithmetic=(a,b)=>{
    const myadd=a+b
    const mysub=a-b
    const mymul=a*b
    const mydiv=a/b
    return [myadd,mysub,mymul,mydiv]

  }
  var arr=[11,22,33,44,55]
  var [v1,v2,,v4,v5]=arr
  var [add,sub,mul,div]=arithmetic(11,22)

  var stud={
        rno:1001,
        sname:"abimanyu",
        mark1:99,
        mark2:45,
        mark3:24
  }
  var emp={
    eno:1009,
    ename:"ajith",
    roll:{
        roll1:'superwising',
        roll2:'checking',
        roll3:'maintance',
        roll4:'packing'
    }
  }
//new model object destructiog
  
  function disp({rno,sname,mark1,mark2,mark3})
  {
    var res="My roll number:"+rno+"<br>My Name:"+sname+"<br>Mark1:"+mark1+"<br>Mark2"+mark2+"<br>Mark3:"+mark3
    document.getElementById("ans").innerHTML=res
  }

  // new model nested object destructing 

  function show({eno,ename,roll:{roll1,roll2,roll3,roll4}})
  {
    var res=eno+"<br>"+ename+"<br>"+roll1+"<br>"+roll2+"<br>"+roll3+"<br>"+roll4
    document.getElementById("ans2").innerHTML=res
  }
  
  
  return(
    <>
    <h2>Destructiong old model</h2>
      <h1>Value:1 {arr[0]}</h1>
      <h1>Value:2 {arr[1]}</h1>
      <h1>Value:3 {arr[2]}</h1>
      <h1>Value:4 {arr[3]}</h1>
      <h1>Value:5 {arr[4]}</h1>
      <h2>New way destructing</h2>
      <h1>value1:{v1}</h1>
      <h1>value2:{v2}</h1>
      <h1>value3:{v4}</h1>      
      <h1>value5:{v5}</h1>
      <h2>Destructing with function</h2>
      <h2>Addition:{add}</h2>
      <h2>Subtracttion:{sub}</h2>
      <h2>Multiplication:{mul}</h2>
      <h2>Division:{div}</h2>
      
      <h2>Destructing object old model</h2>
      <h3>Roll Number:{stud.rno}</h3>
      <h3>Student Name:{stud.sname}</h3>
      <h3>Student Mark1:{stud.mark1}</h3>
      <h3>Student Mark2:{stud.mark2}</h3>
      <h3>Student mark3:{stud.mark3}</h3>
      <h2>Destructing object new model</h2>
      <button onClick={()=>disp(stud)}>clickme</button>
      <button onClick={()=>show(emp)}>clickme</button>
      <div id="ans"></div>
      <div id="ans2"></div>
          </>
  )
}
export default Gowtham
=================================Map method + how to use inline css basic================================
function Gowtham()
{
  var arr=[11,22,233,44,66,99,112]
  var max=arr[0]
  var sum=0
  return(
    <>
        <center>
          <h2>React Loop - Map method</h2>
          </center>
          <ol>{arr.map((item)=><li>{item}</li>)}</ol>
          
           <div style={{display:"none"}}>
            {/* {arr.map((item)=><> {item>max && <>{max=item}</>} </>)} */}
            {arr.map((item)=> item>max && <>{max=item}</>)}
            </div>
          
            <div style={{display:"none"}}>
            {arr.map((item)=>sum=sum+item)}
            </div>
          
            <h1>Max value:{max}</h1>
             <h1>Sum Value:{sum}</h1>

            <h2>Display Even Numbers:</h2>

            {arr.map((item)=>item%2===0 && item+" ")}
        
    </>
  )
}
export default Gowtham
================================== spread operator ... ============
===================================ternary operator=================
==================================module export import==============
modules:
=======
def: break up your code into separate files
use: easy to understand

moudles types:
	1) named (use: variables export and import)
		
		--> in-line individually (multple exports)
			ex:
			mod1.js	
			export const variablename1=value1		
			export const variablename2=value1		
			App.js
			import { variablename1 } from './mod1'
			import { variablename2 } from './mod1'
		--> all at once at bottom
			meaning : only one export
			mod2.js
			const var1=value1
			const var2=value2
			const var3=value3
			export {var1,var2,var3}		
			App.js
			import {var1,var2,var3} from './mod2'
	2) default (ex: component export and import - only one export)		
		create one folder inside src
		create one component either class or function
		export componet
			ex:
			function Vimal()
			{
			return(
			.......
			)
			}
			export default Vimal
		app.js
			import Vimal from './component/filename'

			<vimal/>
============images export import==========================================
ex: D:\notes\abireact\myapp\src\components
commonvar.js

export var accno=1143155000137984
export var ifsc="KVL0001143"
export var aadhar=858415764043
export var myimg2=require("../images/hd2.jpg")  //double dot must


App.js
=======
import { aadhar, accno, ifsc } from "./components/CommonVar"
import myimg1 from "./images/hd4.jpg"--------------------> only import images
import { myimg2 } from "./components/CommonVar" -------------> export and import images

function Gowtham()
{
  return(
      <>
        <h1>MyAadhar:{aadhar}</h1>      
        <h1>Myaccount:{accno}</h1> 
        <h1>IFSC code:{ifsc}</h1>           
        <img src={myimg1} alt="path not found"></img>
        <img src={myimg2} alt="path not found"></img>

      </>
  )
}
export default Gowtham
==================react render 2 ways==================
React Render HTML
==================

React's goal is in many ways to render HTML in a web page.
React renders HTML to the web page by using a function called ReactDOM.render().

The ReactDOM.render() function takes two arguments, HTML code and an HTML element.

But render where?

There is another folder in the root directory of your React project, named "public". In this folder, there is an index.html file.

You'll notice a single <div> in the body of this file. This is where our React application will be rendered.

way 1:
======
header file:
	import ReactDOM from 'react-dom/client'

ex:
const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <App/>
  </React.StrictMode>
);

way:2
======
header file:
	import ReactDOM from 'react-dom'
	ReactDOM.render(<App/>,document.getElementById("root"))
==============react jsx & all notes revision=======================
React JSX:

Javascript and XML:

purpose: allow to write html code


1)how to use single tag:
	ex:
	var data=<h1>..........</h1>

2)large block of html tag
   - must know about "one top level element"
			<>
			..........
			</>
	ex:
	var data=(
			<>  or div or span
			..............
			</>
		)
	impot {ReactDom} from 'react-dom'
	ReactDOM.render(data,document.getElementById("root"))

3) expression: {calculation or path or call function}


	call function : don't use () when no arguments

	ex:
	<img src={path}/>
	<button onClick={show}/>
	<button onClick={()=>show(value1,value2)}
	{a+b/c}
4) attribute name className instead of class
	use: CSS style
	<h1 className="yourclassname">...........</h1>

	index.css
		.yourclassname
		{
		property:value;
		.........
		}
5) element Must be closed
	<></>
	<br></br>
	<br/>
6) don't use double quotes
7) if you want to assign: <>{sum=100}</>
8) control statements
	{(condition1 && condition2 && ..."final") || "esle state"}

	{arr.map((item)=>item)}
	<ol>{arr.map((item)=><li>{item}</li>)}</ol>

9) ternary operator
	exp1? exp2  : exp3

	{isvaliduser===true ? <Valid/> : <Invalid/>}

=================================React styling and css===================
Styling and CSS:
==================
2 types:
	1 ) inline
		ex:
    <h1 style={{property:"value",property:"value"}}>	............... </h1>

	note:
	- don't use semicolon(;) when apply multi property
	- only use comma(,)
	- value must be double quotes key:"value"
	- property is case senstive 
	 ex:
		backgroundColor-->C caps		
		fontSize-->S caps
		
	2 ) external

	create one folder --> right click on src folder
			  --> new folder
			  --> right click on folder
			  --> new file
				  --> filename.css

	App.js or any js file
	======================
	note:
		don't use from
		don't export only import
		extension must filename.css	
	ex:
		import "./foldername/filename.css"
		import "../foldername/filename.css"

	. -> current file's folder
	.. -> current file's pervious folder
=================React state (only works on class comp)=======================
React State:
=============

it is used to store json.

note:
	we can use only class components

syntax:
	import React from "react"
	class classname extends React.Component
	{
		constructor(props)
		{
			super()		
			this.state={
				key1:value,
				key2:[val1,val2,val3,..],
				key3:{key1:val1,key2:val2,..},
				key4:value
				}
		}
		render()
		{
			return(
			<>
				{this.state.key1}

			</>
			)
		}
	}
	export default classname

react state + props:
====================

props: argument passing from index.js file

state: to store props value using json


index.js:
	<App rno="1001" sname="gowthaman"/>

App.js:
	constructor(props)
	{
		super(props)
		this.state={
				myrno=this.props.rno
				sname=this.props.sname
		}

	}
	render()
	{
	return(
		<>
		<h1>{this.state.myrno}</h1>
		</>
	)
	}
ex:
import React from "react";
class Gowtham extends React.Component
{
  constructor(props)
  {
    super(props)
    this.state={rno:this.props.rno,
              sname:this.props.sname,
              mark:this.props.mark
            }
  }
  render()
  {
    return(
        <>
        <h1>React State</h1>
        <h2>Roll number:{this.state.rno}</h2>
        <h2>Sname:{this.state.sname}</h2>
        <h2>Mark 1:{this.state.mark}</h2>
        
        </>
    )
  }
}
export default Gowtham
--------------App.js -- props using function components
function Gowtham(props)
{
  return(
    <>
    <center>
      
    <h1>Student Roll Number:{props.mydata.rno}</h1>
    <h1>Student Name       :{props.mydata.sname}</h1>
    <h1>Student Mark       :{props.mydata.mark}</h1>    

    </center>
    </>
  )
}
export default Gowtham

index.js
========

var stud={
  rno:1002,
  sname:"narmatha",
  mark:19
}
ReactDOM.render(<Gowtham mydata={stud}></Gowtham>,document.getElementById("root"))
================ props - arg passing using class components=============

import React from 'react'
class Gowtham extends React.Component
{
  constructor(props)
  {
    super()
  }
  render()
  {
    return(
        <>
            <h1>This is class Components</h1>
    <h1>Student Roll Number:{this.props.mydata.rno}</h1>
    <h1>Student Name       :{this.props.mydata.sname}</h1>
    <h1>Tamil Mark       :{this.props.mydata.marks.tamil}</h1>    
    <h1>English Mark       :{this.props.mydata.marks.english}</h1>    
    <h1>Maths Mark       :{this.props.mydata.marks["maths"]}</h1>    
    <h1>Science Mark       :{this.props.mydata.marks.science}</h1>    
    <h1>Social Mark       :{this.props.mydata.marks.social}</h1>    

        </>
    )
  }
}
export default Gowtham
=======================props + json + for in + map ================
function Gowtham(props)
{

  var fres=[]
  var i=0
  for(var k in props.mydata)
  {
    //console.log(k,"=============>",props.mydata[k])
    fres[i++]=<>{k}:{props.mydata[k]}</>
  }
  return(
    <>
    <center>
    <h2>================old method============</h2>
    <h1>Tamil Mark       :{props.mydata.tamil}</h1>    
    <h1>English Mark       :{props.mydata.english}</h1>    
    <h1>Maths Mark       :{props.mydata["maths"]}</h1>    
    <h1>Science Mark       :{props.mydata.science}</h1>    
    <h1>Social Mark       :{props.mydata.social}</h1>     
    </center>
    <h2>================new method============</h2>
    <ol>{fres.map((item)=><li>{item}</li>)}</ol>    
    </>
  )
}
export default Gowtham
====================== props + json + for in + class + table result + sum==========
import React from 'react'
class Gowtham extends React.Component
{
  constructor(props)
  {
    super()
  }
  render()
  {
    var fres=[]
    var i=0,tot=0
    for(var k in this.props.mydata)
    {
      //console.log(k,"=============>",props.mydata[k])
      tot=tot+this.props.mydata[k]
      fres[i++]=<tr><td>{k}</td><td align='right'>{this.props.mydata[k]}</td></tr>
    }
    return(
        <>
    <h2>=======class components old model=====================</h2>
    <h1>Tamil Mark       :{this.props.mydata.tamil}</h1>    
    <h1>English Mark       :{this.props.mydata.english}</h1>    
    <h1>Maths Mark       :{this.props.mydata["maths"]}</h1>    
    <h1>Science Mark       :{this.props.mydata.science}</h1>    
    <h1>Social Mark       :{this.props.mydata.social}</h1>    
    <h2>=======class components new model=====================</h2>
    <table border="2">
    <tr><th>Subjects</th><th>Marks</th></tr>  
    {fres.map((item)=><>{item}</>)}    
    <tr><th>Total Marks:</th><th align='right'>{tot}</th></tr>
    </table>
        </>        
    )
  }
}
export default Gowtham
